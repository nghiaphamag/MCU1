
Stm32f446xx_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b68  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000d2c  08000d2c  00020414  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000d2c  08000d2c  00020414  2**0
                  CONTENTS
  4 .ARM          00000000  08000d2c  08000d2c  00020414  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000d2c  08000d2c  00020414  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d2c  08000d2c  00010d2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000d30  08000d30  00010d30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000414  20000000  08000d34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000040  20000414  08001148  00020414  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000454  08001148  00020454  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020414  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000366f  00000000  00000000  0002043e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000080c  00000000  00000000  00023aad  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000188  00000000  00000000  000242c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000140  00000000  00000000  00024448  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002bb9  00000000  00000000  00024588  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001d15  00000000  00000000  00027141  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000aa47  00000000  00000000  00028e56  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0003389d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000055c  00000000  00000000  00033918  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000414 	.word	0x20000414
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000d14 	.word	0x08000d14

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000418 	.word	0x20000418
 8000200:	08000d14 	.word	0x08000d14

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <delay250ms>:

USART_Handle_t USART2Handle;
char msg[1024] = "UART Tx testing...\n\r";

void delay250ms(void)
{
 8000214:	b480      	push	{r7}
 8000216:	b083      	sub	sp, #12
 8000218:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000/2 ; i++);
 800021a:	2300      	movs	r3, #0
 800021c:	607b      	str	r3, [r7, #4]
 800021e:	e002      	b.n	8000226 <delay250ms+0x12>
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	3301      	adds	r3, #1
 8000224:	607b      	str	r3, [r7, #4]
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	4a03      	ldr	r2, [pc, #12]	; (8000238 <delay250ms+0x24>)
 800022a:	4293      	cmp	r3, r2
 800022c:	d9f8      	bls.n	8000220 <delay250ms+0xc>
}
 800022e:	bf00      	nop
 8000230:	370c      	adds	r7, #12
 8000232:	46bd      	mov	sp, r7
 8000234:	bc80      	pop	{r7}
 8000236:	4770      	bx	lr
 8000238:	0003d08f 	.word	0x0003d08f

0800023c <GPIO_ButtonInit>:

void GPIO_ButtonInit(void) {
 800023c:	b580      	push	{r7, lr}
 800023e:	b084      	sub	sp, #16
 8000240:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn;
	memset(&GPIOBtn, 0, sizeof(GPIOBtn));
 8000242:	1d3b      	adds	r3, r7, #4
 8000244:	220c      	movs	r2, #12
 8000246:	2100      	movs	r1, #0
 8000248:	4618      	mov	r0, r3
 800024a:	f000 fd5b 	bl	8000d04 <memset>

	GPIOBtn.pGPIOx = GPIOC;
 800024e:	4b09      	ldr	r3, [pc, #36]	; (8000274 <GPIO_ButtonInit+0x38>)
 8000250:	607b      	str	r3, [r7, #4]

	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber 		= GPIO_PIN_NO_13;
 8000252:	230d      	movs	r3, #13
 8000254:	723b      	strb	r3, [r7, #8]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode 		= GPIO_MODE_IN;
 8000256:	2300      	movs	r3, #0
 8000258:	727b      	strb	r3, [r7, #9]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl 	= GPIO_NO_PUPD;
 800025a:	2300      	movs	r3, #0
 800025c:	72fb      	strb	r3, [r7, #11]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed 		= GPIO_SPEED_FAST;
 800025e:	2302      	movs	r3, #2
 8000260:	72bb      	strb	r3, [r7, #10]

	GPIO_Init(&GPIOBtn);
 8000262:	1d3b      	adds	r3, r7, #4
 8000264:	4618      	mov	r0, r3
 8000266:	f000 f913 	bl	8000490 <GPIO_Init>
}
 800026a:	bf00      	nop
 800026c:	3710      	adds	r7, #16
 800026e:	46bd      	mov	sp, r7
 8000270:	bd80      	pop	{r7, pc}
 8000272:	bf00      	nop
 8000274:	40020800 	.word	0x40020800

08000278 <USART2_GPIOInits>:

void USART2_GPIOInits(void) {
 8000278:	b580      	push	{r7, lr}
 800027a:	b084      	sub	sp, #16
 800027c:	af00      	add	r7, sp, #0
	GPIO_Handle_t USART2Pins;
	memset(&USART2Pins, 0, sizeof(USART2Pins));
 800027e:	1d3b      	adds	r3, r7, #4
 8000280:	220c      	movs	r2, #12
 8000282:	2100      	movs	r1, #0
 8000284:	4618      	mov	r0, r3
 8000286:	f000 fd3d 	bl	8000d04 <memset>

	USART2Pins.pGPIOx = GPIOA;
 800028a:	4b0e      	ldr	r3, [pc, #56]	; (80002c4 <USART2_GPIOInits+0x4c>)
 800028c:	607b      	str	r3, [r7, #4]
	USART2Pins.GPIO_PinConfig.GPIO_PinMode 			= GPIO_MODE_ALTFN;
 800028e:	2302      	movs	r3, #2
 8000290:	727b      	strb	r3, [r7, #9]
	USART2Pins.GPIO_PinConfig.GPIO_PinAltFunMode 	= 7;
 8000292:	2307      	movs	r3, #7
 8000294:	737b      	strb	r3, [r7, #13]
	USART2Pins.GPIO_PinConfig.GPIO_PinOPType 		= GPIO_OP_TYPE_PP;
 8000296:	2300      	movs	r3, #0
 8000298:	733b      	strb	r3, [r7, #12]
	USART2Pins.GPIO_PinConfig.GPIO_PinPuPdControl 	= GPIO_PIN_PU;
 800029a:	2301      	movs	r3, #1
 800029c:	72fb      	strb	r3, [r7, #11]
	USART2Pins.GPIO_PinConfig.GPIO_PinSpeed 		= GPIO_SPEED_FAST;
 800029e:	2302      	movs	r3, #2
 80002a0:	72bb      	strb	r3, [r7, #10]

	USART2Pins.GPIO_PinConfig.GPIO_PinNumber 		= GPIO_PIN_NO_9;					//USART_Tx
 80002a2:	2309      	movs	r3, #9
 80002a4:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&USART2Pins);
 80002a6:	1d3b      	adds	r3, r7, #4
 80002a8:	4618      	mov	r0, r3
 80002aa:	f000 f8f1 	bl	8000490 <GPIO_Init>

	USART2Pins.GPIO_PinConfig.GPIO_PinNumber 		= GPIO_PIN_NO_10;					//USART_Rx
 80002ae:	230a      	movs	r3, #10
 80002b0:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&USART2Pins);
 80002b2:	1d3b      	adds	r3, r7, #4
 80002b4:	4618      	mov	r0, r3
 80002b6:	f000 f8eb 	bl	8000490 <GPIO_Init>
}
 80002ba:	bf00      	nop
 80002bc:	3710      	adds	r7, #16
 80002be:	46bd      	mov	sp, r7
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	40020000 	.word	0x40020000

080002c8 <USART2_Inits>:

void USART2_Inits(void) {
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0

//	memset(&USART2Handle, 0, sizeof(USART2Handle));

	USART2Handle.pUSARTx = USART1;
 80002cc:	4b0d      	ldr	r3, [pc, #52]	; (8000304 <USART2_Inits+0x3c>)
 80002ce:	4a0e      	ldr	r2, [pc, #56]	; (8000308 <USART2_Inits+0x40>)
 80002d0:	601a      	str	r2, [r3, #0]
	USART2Handle.USART_Config.USART_Baud = USART_STD_BAUD_115200;
 80002d2:	4b0c      	ldr	r3, [pc, #48]	; (8000304 <USART2_Inits+0x3c>)
 80002d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002d8:	609a      	str	r2, [r3, #8]
	USART2Handle.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CTRL_NONE;
 80002da:	4b0a      	ldr	r3, [pc, #40]	; (8000304 <USART2_Inits+0x3c>)
 80002dc:	2200      	movs	r2, #0
 80002de:	73da      	strb	r2, [r3, #15]
	USART2Handle.USART_Config.USART_Mode = USART_MODE_ONLY_TX;
 80002e0:	4b08      	ldr	r3, [pc, #32]	; (8000304 <USART2_Inits+0x3c>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	711a      	strb	r2, [r3, #4]
	USART2Handle.USART_Config.USART_NoOfStopBits = USART_STOPBITS_1;
 80002e6:	4b07      	ldr	r3, [pc, #28]	; (8000304 <USART2_Inits+0x3c>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	731a      	strb	r2, [r3, #12]
	USART2Handle.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 80002ec:	4b05      	ldr	r3, [pc, #20]	; (8000304 <USART2_Inits+0x3c>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	739a      	strb	r2, [r3, #14]
	USART2Handle.USART_Config.USART_WordLength = USART_WORDLEN_8BITS;
 80002f2:	4b04      	ldr	r3, [pc, #16]	; (8000304 <USART2_Inits+0x3c>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	735a      	strb	r2, [r3, #13]

	USART_Init(&USART2Handle);
 80002f8:	4802      	ldr	r0, [pc, #8]	; (8000304 <USART2_Inits+0x3c>)
 80002fa:	f000 fb71 	bl	80009e0 <USART_Init>
}
 80002fe:	bf00      	nop
 8000300:	bd80      	pop	{r7, pc}
 8000302:	bf00      	nop
 8000304:	20000430 	.word	0x20000430
 8000308:	40011000 	.word	0x40011000

0800030c <main>:

int main(void) {
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
	GPIO_ButtonInit();
 8000310:	f7ff ff94 	bl	800023c <GPIO_ButtonInit>
	USART2_GPIOInits();
 8000314:	f7ff ffb0 	bl	8000278 <USART2_GPIOInits>
	USART2_Inits();
 8000318:	f7ff ffd6 	bl	80002c8 <USART2_Inits>
	USART_PeripheralControl(USART1, ENABLE);
 800031c:	2101      	movs	r1, #1
 800031e:	480b      	ldr	r0, [pc, #44]	; (800034c <main+0x40>)
 8000320:	f000 fc3e 	bl	8000ba0 <USART_PeripheralControl>

	while(1) {
		while(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13));
 8000324:	bf00      	nop
 8000326:	210d      	movs	r1, #13
 8000328:	4809      	ldr	r0, [pc, #36]	; (8000350 <main+0x44>)
 800032a:	f000 fa51 	bl	80007d0 <GPIO_ReadFromInputPin>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d1f8      	bne.n	8000326 <main+0x1a>
		delay250ms();
 8000334:	f7ff ff6e 	bl	8000214 <delay250ms>
		USART_SendData(&USART2Handle, (uint8_t*)msg, strlen(msg));
 8000338:	4806      	ldr	r0, [pc, #24]	; (8000354 <main+0x48>)
 800033a:	f7ff ff63 	bl	8000204 <strlen>
 800033e:	4603      	mov	r3, r0
 8000340:	461a      	mov	r2, r3
 8000342:	4904      	ldr	r1, [pc, #16]	; (8000354 <main+0x48>)
 8000344:	4804      	ldr	r0, [pc, #16]	; (8000358 <main+0x4c>)
 8000346:	f000 fbca 	bl	8000ade <USART_SendData>
		while(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13));
 800034a:	e7eb      	b.n	8000324 <main+0x18>
 800034c:	40011000 	.word	0x40011000
 8000350:	40020800 	.word	0x40020800
 8000354:	20000000 	.word	0x20000000
 8000358:	20000430 	.word	0x20000430

0800035c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800035c:	480d      	ldr	r0, [pc, #52]	; (8000394 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800035e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000360:	480d      	ldr	r0, [pc, #52]	; (8000398 <LoopForever+0x6>)
  ldr r1, =_edata
 8000362:	490e      	ldr	r1, [pc, #56]	; (800039c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000364:	4a0e      	ldr	r2, [pc, #56]	; (80003a0 <LoopForever+0xe>)
  movs r3, #0
 8000366:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000368:	e002      	b.n	8000370 <LoopCopyDataInit>

0800036a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800036a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800036c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800036e:	3304      	adds	r3, #4

08000370 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000370:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000372:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000374:	d3f9      	bcc.n	800036a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000376:	4a0b      	ldr	r2, [pc, #44]	; (80003a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000378:	4c0b      	ldr	r4, [pc, #44]	; (80003a8 <LoopForever+0x16>)
  movs r3, #0
 800037a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800037c:	e001      	b.n	8000382 <LoopFillZerobss>

0800037e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800037e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000380:	3204      	adds	r2, #4

08000382 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000382:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000384:	d3fb      	bcc.n	800037e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000386:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 800038a:	f000 fc97 	bl	8000cbc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800038e:	f7ff ffbd 	bl	800030c <main>

08000392 <LoopForever>:

LoopForever:
    b LoopForever
 8000392:	e7fe      	b.n	8000392 <LoopForever>
  ldr   r0, =_estack
 8000394:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000398:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800039c:	20000414 	.word	0x20000414
  ldr r2, =_sidata
 80003a0:	08000d34 	.word	0x08000d34
  ldr r2, =_sbss
 80003a4:	20000414 	.word	0x20000414
  ldr r4, =_ebss
 80003a8:	20000454 	.word	0x20000454

080003ac <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003ac:	e7fe      	b.n	80003ac <ADC_IRQHandler>
	...

080003b0 <GPIO_PeriClockControl>:
 * @param[in]		- ENABLE or DISABLE macros
 * @return			- None
 * @note			- None
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80003b0:	b480      	push	{r7}
 80003b2:	b083      	sub	sp, #12
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
 80003b8:	460b      	mov	r3, r1
 80003ba:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE){
 80003bc:	78fb      	ldrb	r3, [r7, #3]
 80003be:	2b01      	cmp	r3, #1
 80003c0:	d12b      	bne.n	800041a <GPIO_PeriClockControl+0x6a>
		if (pGPIOx == GPIOA) {
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	4a2d      	ldr	r2, [pc, #180]	; (800047c <GPIO_PeriClockControl+0xcc>)
 80003c6:	4293      	cmp	r3, r2
 80003c8:	d106      	bne.n	80003d8 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 80003ca:	4b2d      	ldr	r3, [pc, #180]	; (8000480 <GPIO_PeriClockControl+0xd0>)
 80003cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ce:	4a2c      	ldr	r2, [pc, #176]	; (8000480 <GPIO_PeriClockControl+0xd0>)
 80003d0:	f043 0301 	orr.w	r3, r3, #1
 80003d4:	6313      	str	r3, [r2, #48]	; 0x30
		}
		else if (pGPIOx == GPIOD) {
			GPIOD_PCLK_DI();
		}
	}
}
 80003d6:	e04b      	b.n	8000470 <GPIO_PeriClockControl+0xc0>
		else if (pGPIOx == GPIOB) {
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	4a2a      	ldr	r2, [pc, #168]	; (8000484 <GPIO_PeriClockControl+0xd4>)
 80003dc:	4293      	cmp	r3, r2
 80003de:	d106      	bne.n	80003ee <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80003e0:	4b27      	ldr	r3, [pc, #156]	; (8000480 <GPIO_PeriClockControl+0xd0>)
 80003e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003e4:	4a26      	ldr	r2, [pc, #152]	; (8000480 <GPIO_PeriClockControl+0xd0>)
 80003e6:	f043 0302 	orr.w	r3, r3, #2
 80003ea:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003ec:	e040      	b.n	8000470 <GPIO_PeriClockControl+0xc0>
		else if (pGPIOx == GPIOC) {
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	4a25      	ldr	r2, [pc, #148]	; (8000488 <GPIO_PeriClockControl+0xd8>)
 80003f2:	4293      	cmp	r3, r2
 80003f4:	d106      	bne.n	8000404 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80003f6:	4b22      	ldr	r3, [pc, #136]	; (8000480 <GPIO_PeriClockControl+0xd0>)
 80003f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003fa:	4a21      	ldr	r2, [pc, #132]	; (8000480 <GPIO_PeriClockControl+0xd0>)
 80003fc:	f043 0304 	orr.w	r3, r3, #4
 8000400:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000402:	e035      	b.n	8000470 <GPIO_PeriClockControl+0xc0>
		else if (pGPIOx == GPIOD) {
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	4a21      	ldr	r2, [pc, #132]	; (800048c <GPIO_PeriClockControl+0xdc>)
 8000408:	4293      	cmp	r3, r2
 800040a:	d131      	bne.n	8000470 <GPIO_PeriClockControl+0xc0>
			GPIOD_PCLK_EN();
 800040c:	4b1c      	ldr	r3, [pc, #112]	; (8000480 <GPIO_PeriClockControl+0xd0>)
 800040e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000410:	4a1b      	ldr	r2, [pc, #108]	; (8000480 <GPIO_PeriClockControl+0xd0>)
 8000412:	f043 0308 	orr.w	r3, r3, #8
 8000416:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000418:	e02a      	b.n	8000470 <GPIO_PeriClockControl+0xc0>
		if (pGPIOx == GPIOA) {
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	4a17      	ldr	r2, [pc, #92]	; (800047c <GPIO_PeriClockControl+0xcc>)
 800041e:	4293      	cmp	r3, r2
 8000420:	d106      	bne.n	8000430 <GPIO_PeriClockControl+0x80>
			GPIOA_PCLK_DI();
 8000422:	4b17      	ldr	r3, [pc, #92]	; (8000480 <GPIO_PeriClockControl+0xd0>)
 8000424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000426:	4a16      	ldr	r2, [pc, #88]	; (8000480 <GPIO_PeriClockControl+0xd0>)
 8000428:	f023 0301 	bic.w	r3, r3, #1
 800042c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800042e:	e01f      	b.n	8000470 <GPIO_PeriClockControl+0xc0>
		else if (pGPIOx == GPIOB) {
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	4a14      	ldr	r2, [pc, #80]	; (8000484 <GPIO_PeriClockControl+0xd4>)
 8000434:	4293      	cmp	r3, r2
 8000436:	d106      	bne.n	8000446 <GPIO_PeriClockControl+0x96>
			GPIOB_PCLK_DI();
 8000438:	4b11      	ldr	r3, [pc, #68]	; (8000480 <GPIO_PeriClockControl+0xd0>)
 800043a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800043c:	4a10      	ldr	r2, [pc, #64]	; (8000480 <GPIO_PeriClockControl+0xd0>)
 800043e:	f023 0302 	bic.w	r3, r3, #2
 8000442:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000444:	e014      	b.n	8000470 <GPIO_PeriClockControl+0xc0>
		else if (pGPIOx == GPIOC) {
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	4a0f      	ldr	r2, [pc, #60]	; (8000488 <GPIO_PeriClockControl+0xd8>)
 800044a:	4293      	cmp	r3, r2
 800044c:	d106      	bne.n	800045c <GPIO_PeriClockControl+0xac>
			GPIOC_PCLK_DI();
 800044e:	4b0c      	ldr	r3, [pc, #48]	; (8000480 <GPIO_PeriClockControl+0xd0>)
 8000450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000452:	4a0b      	ldr	r2, [pc, #44]	; (8000480 <GPIO_PeriClockControl+0xd0>)
 8000454:	f023 0304 	bic.w	r3, r3, #4
 8000458:	6313      	str	r3, [r2, #48]	; 0x30
}
 800045a:	e009      	b.n	8000470 <GPIO_PeriClockControl+0xc0>
		else if (pGPIOx == GPIOD) {
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	4a0b      	ldr	r2, [pc, #44]	; (800048c <GPIO_PeriClockControl+0xdc>)
 8000460:	4293      	cmp	r3, r2
 8000462:	d105      	bne.n	8000470 <GPIO_PeriClockControl+0xc0>
			GPIOD_PCLK_DI();
 8000464:	4b06      	ldr	r3, [pc, #24]	; (8000480 <GPIO_PeriClockControl+0xd0>)
 8000466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000468:	4a05      	ldr	r2, [pc, #20]	; (8000480 <GPIO_PeriClockControl+0xd0>)
 800046a:	f023 0308 	bic.w	r3, r3, #8
 800046e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000470:	bf00      	nop
 8000472:	370c      	adds	r7, #12
 8000474:	46bd      	mov	sp, r7
 8000476:	bc80      	pop	{r7}
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop
 800047c:	40020000 	.word	0x40020000
 8000480:	40023800 	.word	0x40023800
 8000484:	40020400 	.word	0x40020400
 8000488:	40020800 	.word	0x40020800
 800048c:	40020c00 	.word	0x40020c00

08000490 <GPIO_Init>:
 * @param[in]		- Handle structure for a GPIO pin
 * @return			- None
 * @note			- Configure the mode of GPIO Pin >> Configure the speed >> Configure the pull-up pull-down >> Configure the output type >> Configure the alt functionality
 */
 void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
 {
 8000490:	b580      	push	{r7, lr}
 8000492:	b086      	sub	sp, #24
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
	 uint32_t temp = 0;
 8000498:	2300      	movs	r3, #0
 800049a:	617b      	str	r3, [r7, #20]
	 GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	2101      	movs	r1, #1
 80004a2:	4618      	mov	r0, r3
 80004a4:	f7ff ff84 	bl	80003b0 <GPIO_PeriClockControl>
	 //Configure the mode of GPIO Pin
	 if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG) {
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	795b      	ldrb	r3, [r3, #5]
 80004ac:	2b03      	cmp	r3, #3
 80004ae:	d820      	bhi.n	80004f2 <GPIO_Init+0x62>
		 //Non-interrupt mode
		 temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << ( pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber * 2) );
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	795b      	ldrb	r3, [r3, #5]
 80004b4:	461a      	mov	r2, r3
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	791b      	ldrb	r3, [r3, #4]
 80004ba:	005b      	lsls	r3, r3, #1
 80004bc:	fa02 f303 	lsl.w	r3, r2, r3
 80004c0:	617b      	str	r3, [r7, #20]
		 pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber * 2) );
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	681a      	ldr	r2, [r3, #0]
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	791b      	ldrb	r3, [r3, #4]
 80004cc:	005b      	lsls	r3, r3, #1
 80004ce:	2103      	movs	r1, #3
 80004d0:	fa01 f303 	lsl.w	r3, r1, r3
 80004d4:	43db      	mvns	r3, r3
 80004d6:	4619      	mov	r1, r3
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	400a      	ands	r2, r1
 80004de:	601a      	str	r2, [r3, #0]
		 pGPIOHandle->pGPIOx->MODER |= temp;
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	6819      	ldr	r1, [r3, #0]
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	697a      	ldr	r2, [r7, #20]
 80004ec:	430a      	orrs	r2, r1
 80004ee:	601a      	str	r2, [r3, #0]
 80004f0:	e0c8      	b.n	8000684 <GPIO_Init+0x1f4>
	 }else {
		 //Interrupt mode
		 if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT) {
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	795b      	ldrb	r3, [r3, #5]
 80004f6:	2b04      	cmp	r3, #4
 80004f8:	d117      	bne.n	800052a <GPIO_Init+0x9a>
			 //Configure the FTSR
			 EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80004fa:	4b47      	ldr	r3, [pc, #284]	; (8000618 <GPIO_Init+0x188>)
 80004fc:	68db      	ldr	r3, [r3, #12]
 80004fe:	687a      	ldr	r2, [r7, #4]
 8000500:	7912      	ldrb	r2, [r2, #4]
 8000502:	4611      	mov	r1, r2
 8000504:	2201      	movs	r2, #1
 8000506:	408a      	lsls	r2, r1
 8000508:	4611      	mov	r1, r2
 800050a:	4a43      	ldr	r2, [pc, #268]	; (8000618 <GPIO_Init+0x188>)
 800050c:	430b      	orrs	r3, r1
 800050e:	60d3      	str	r3, [r2, #12]
			 //Clear the corresponding RTSR
			 EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000510:	4b41      	ldr	r3, [pc, #260]	; (8000618 <GPIO_Init+0x188>)
 8000512:	689b      	ldr	r3, [r3, #8]
 8000514:	687a      	ldr	r2, [r7, #4]
 8000516:	7912      	ldrb	r2, [r2, #4]
 8000518:	4611      	mov	r1, r2
 800051a:	2201      	movs	r2, #1
 800051c:	408a      	lsls	r2, r1
 800051e:	43d2      	mvns	r2, r2
 8000520:	4611      	mov	r1, r2
 8000522:	4a3d      	ldr	r2, [pc, #244]	; (8000618 <GPIO_Init+0x188>)
 8000524:	400b      	ands	r3, r1
 8000526:	6093      	str	r3, [r2, #8]
 8000528:	e035      	b.n	8000596 <GPIO_Init+0x106>
		 }
		 else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT) {
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	795b      	ldrb	r3, [r3, #5]
 800052e:	2b05      	cmp	r3, #5
 8000530:	d117      	bne.n	8000562 <GPIO_Init+0xd2>
			 //Configure the RTSR
			 EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000532:	4b39      	ldr	r3, [pc, #228]	; (8000618 <GPIO_Init+0x188>)
 8000534:	689b      	ldr	r3, [r3, #8]
 8000536:	687a      	ldr	r2, [r7, #4]
 8000538:	7912      	ldrb	r2, [r2, #4]
 800053a:	4611      	mov	r1, r2
 800053c:	2201      	movs	r2, #1
 800053e:	408a      	lsls	r2, r1
 8000540:	4611      	mov	r1, r2
 8000542:	4a35      	ldr	r2, [pc, #212]	; (8000618 <GPIO_Init+0x188>)
 8000544:	430b      	orrs	r3, r1
 8000546:	6093      	str	r3, [r2, #8]
			 //Clear the corresponding FTSR
			 EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000548:	4b33      	ldr	r3, [pc, #204]	; (8000618 <GPIO_Init+0x188>)
 800054a:	68db      	ldr	r3, [r3, #12]
 800054c:	687a      	ldr	r2, [r7, #4]
 800054e:	7912      	ldrb	r2, [r2, #4]
 8000550:	4611      	mov	r1, r2
 8000552:	2201      	movs	r2, #1
 8000554:	408a      	lsls	r2, r1
 8000556:	43d2      	mvns	r2, r2
 8000558:	4611      	mov	r1, r2
 800055a:	4a2f      	ldr	r2, [pc, #188]	; (8000618 <GPIO_Init+0x188>)
 800055c:	400b      	ands	r3, r1
 800055e:	60d3      	str	r3, [r2, #12]
 8000560:	e019      	b.n	8000596 <GPIO_Init+0x106>
		 }
		 else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT) {
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	795b      	ldrb	r3, [r3, #5]
 8000566:	2b06      	cmp	r3, #6
 8000568:	d115      	bne.n	8000596 <GPIO_Init+0x106>
			 //Configure the FTSR & RTSR
			 EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 800056a:	4b2b      	ldr	r3, [pc, #172]	; (8000618 <GPIO_Init+0x188>)
 800056c:	68db      	ldr	r3, [r3, #12]
 800056e:	687a      	ldr	r2, [r7, #4]
 8000570:	7912      	ldrb	r2, [r2, #4]
 8000572:	4611      	mov	r1, r2
 8000574:	2201      	movs	r2, #1
 8000576:	408a      	lsls	r2, r1
 8000578:	4611      	mov	r1, r2
 800057a:	4a27      	ldr	r2, [pc, #156]	; (8000618 <GPIO_Init+0x188>)
 800057c:	430b      	orrs	r3, r1
 800057e:	60d3      	str	r3, [r2, #12]
			 EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000580:	4b25      	ldr	r3, [pc, #148]	; (8000618 <GPIO_Init+0x188>)
 8000582:	689b      	ldr	r3, [r3, #8]
 8000584:	687a      	ldr	r2, [r7, #4]
 8000586:	7912      	ldrb	r2, [r2, #4]
 8000588:	4611      	mov	r1, r2
 800058a:	2201      	movs	r2, #1
 800058c:	408a      	lsls	r2, r1
 800058e:	4611      	mov	r1, r2
 8000590:	4a21      	ldr	r2, [pc, #132]	; (8000618 <GPIO_Init+0x188>)
 8000592:	430b      	orrs	r3, r1
 8000594:	6093      	str	r3, [r2, #8]
		 }

		//Configure the GPIO port selection in SYSCFG_EXTICR
		 uint8_t temp1, temp2, portcode;
		 temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	791b      	ldrb	r3, [r3, #4]
 800059a:	089b      	lsrs	r3, r3, #2
 800059c:	74fb      	strb	r3, [r7, #19]
		 temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	791b      	ldrb	r3, [r3, #4]
 80005a2:	f003 0303 	and.w	r3, r3, #3
 80005a6:	74bb      	strb	r3, [r7, #18]
		 portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a1b      	ldr	r2, [pc, #108]	; (800061c <GPIO_Init+0x18c>)
 80005ae:	4293      	cmp	r3, r2
 80005b0:	d044      	beq.n	800063c <GPIO_Init+0x1ac>
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4a1a      	ldr	r2, [pc, #104]	; (8000620 <GPIO_Init+0x190>)
 80005b8:	4293      	cmp	r3, r2
 80005ba:	d02b      	beq.n	8000614 <GPIO_Init+0x184>
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a18      	ldr	r2, [pc, #96]	; (8000624 <GPIO_Init+0x194>)
 80005c2:	4293      	cmp	r3, r2
 80005c4:	d024      	beq.n	8000610 <GPIO_Init+0x180>
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	4a17      	ldr	r2, [pc, #92]	; (8000628 <GPIO_Init+0x198>)
 80005cc:	4293      	cmp	r3, r2
 80005ce:	d01d      	beq.n	800060c <GPIO_Init+0x17c>
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a15      	ldr	r2, [pc, #84]	; (800062c <GPIO_Init+0x19c>)
 80005d6:	4293      	cmp	r3, r2
 80005d8:	d016      	beq.n	8000608 <GPIO_Init+0x178>
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	4a14      	ldr	r2, [pc, #80]	; (8000630 <GPIO_Init+0x1a0>)
 80005e0:	4293      	cmp	r3, r2
 80005e2:	d00f      	beq.n	8000604 <GPIO_Init+0x174>
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a12      	ldr	r2, [pc, #72]	; (8000634 <GPIO_Init+0x1a4>)
 80005ea:	4293      	cmp	r3, r2
 80005ec:	d008      	beq.n	8000600 <GPIO_Init+0x170>
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4a11      	ldr	r2, [pc, #68]	; (8000638 <GPIO_Init+0x1a8>)
 80005f4:	4293      	cmp	r3, r2
 80005f6:	d101      	bne.n	80005fc <GPIO_Init+0x16c>
 80005f8:	2307      	movs	r3, #7
 80005fa:	e020      	b.n	800063e <GPIO_Init+0x1ae>
 80005fc:	2300      	movs	r3, #0
 80005fe:	e01e      	b.n	800063e <GPIO_Init+0x1ae>
 8000600:	2306      	movs	r3, #6
 8000602:	e01c      	b.n	800063e <GPIO_Init+0x1ae>
 8000604:	2305      	movs	r3, #5
 8000606:	e01a      	b.n	800063e <GPIO_Init+0x1ae>
 8000608:	2304      	movs	r3, #4
 800060a:	e018      	b.n	800063e <GPIO_Init+0x1ae>
 800060c:	2303      	movs	r3, #3
 800060e:	e016      	b.n	800063e <GPIO_Init+0x1ae>
 8000610:	2302      	movs	r3, #2
 8000612:	e014      	b.n	800063e <GPIO_Init+0x1ae>
 8000614:	2301      	movs	r3, #1
 8000616:	e012      	b.n	800063e <GPIO_Init+0x1ae>
 8000618:	40013c00 	.word	0x40013c00
 800061c:	40020000 	.word	0x40020000
 8000620:	40020400 	.word	0x40020400
 8000624:	40020800 	.word	0x40020800
 8000628:	40020c00 	.word	0x40020c00
 800062c:	40021000 	.word	0x40021000
 8000630:	40021400 	.word	0x40021400
 8000634:	40021800 	.word	0x40021800
 8000638:	40021c00 	.word	0x40021c00
 800063c:	2300      	movs	r3, #0
 800063e:	747b      	strb	r3, [r7, #17]
		 SYSCFG_PCLK_EN();
 8000640:	4b60      	ldr	r3, [pc, #384]	; (80007c4 <GPIO_Init+0x334>)
 8000642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000644:	4a5f      	ldr	r2, [pc, #380]	; (80007c4 <GPIO_Init+0x334>)
 8000646:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800064a:	6453      	str	r3, [r2, #68]	; 0x44
		 SYSCFG->EXTICR[temp1] |= (portcode << (4 * temp2));
 800064c:	4a5e      	ldr	r2, [pc, #376]	; (80007c8 <GPIO_Init+0x338>)
 800064e:	7cfb      	ldrb	r3, [r7, #19]
 8000650:	3302      	adds	r3, #2
 8000652:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000656:	7c79      	ldrb	r1, [r7, #17]
 8000658:	7cbb      	ldrb	r3, [r7, #18]
 800065a:	009b      	lsls	r3, r3, #2
 800065c:	fa01 f303 	lsl.w	r3, r1, r3
 8000660:	4618      	mov	r0, r3
 8000662:	4959      	ldr	r1, [pc, #356]	; (80007c8 <GPIO_Init+0x338>)
 8000664:	7cfb      	ldrb	r3, [r7, #19]
 8000666:	4302      	orrs	r2, r0
 8000668:	3302      	adds	r3, #2
 800066a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		//Enable EXTI interrupt delivery using IMR
		EXTI->IMR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 800066e:	4b57      	ldr	r3, [pc, #348]	; (80007cc <GPIO_Init+0x33c>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	687a      	ldr	r2, [r7, #4]
 8000674:	7912      	ldrb	r2, [r2, #4]
 8000676:	4611      	mov	r1, r2
 8000678:	2201      	movs	r2, #1
 800067a:	408a      	lsls	r2, r1
 800067c:	4611      	mov	r1, r2
 800067e:	4a53      	ldr	r2, [pc, #332]	; (80007cc <GPIO_Init+0x33c>)
 8000680:	430b      	orrs	r3, r1
 8000682:	6013      	str	r3, [r2, #0]

	 }

	 //2. Configure the speed
	 temp = 0;
 8000684:	2300      	movs	r3, #0
 8000686:	617b      	str	r3, [r7, #20]
	 temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber *2) );
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	799b      	ldrb	r3, [r3, #6]
 800068c:	461a      	mov	r2, r3
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	791b      	ldrb	r3, [r3, #4]
 8000692:	005b      	lsls	r3, r3, #1
 8000694:	fa02 f303 	lsl.w	r3, r2, r3
 8000698:	617b      	str	r3, [r7, #20]
	 pGPIOHandle->pGPIOx->OSPEEDER &= ~( 0x3 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber * 2) );
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	689a      	ldr	r2, [r3, #8]
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	791b      	ldrb	r3, [r3, #4]
 80006a4:	005b      	lsls	r3, r3, #1
 80006a6:	2103      	movs	r1, #3
 80006a8:	fa01 f303 	lsl.w	r3, r1, r3
 80006ac:	43db      	mvns	r3, r3
 80006ae:	4619      	mov	r1, r3
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	400a      	ands	r2, r1
 80006b6:	609a      	str	r2, [r3, #8]
	 pGPIOHandle->pGPIOx->OSPEEDER |= temp;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	6899      	ldr	r1, [r3, #8]
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	697a      	ldr	r2, [r7, #20]
 80006c4:	430a      	orrs	r2, r1
 80006c6:	609a      	str	r2, [r3, #8]

	 //3. Configure the pull-up pull-down
	 temp = 0;
 80006c8:	2300      	movs	r3, #0
 80006ca:	617b      	str	r3, [r7, #20]
	 temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber * 2) );
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	79db      	ldrb	r3, [r3, #7]
 80006d0:	461a      	mov	r2, r3
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	791b      	ldrb	r3, [r3, #4]
 80006d6:	005b      	lsls	r3, r3, #1
 80006d8:	fa02 f303 	lsl.w	r3, r2, r3
 80006dc:	617b      	str	r3, [r7, #20]
	 pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber * 2) );
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	68da      	ldr	r2, [r3, #12]
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	791b      	ldrb	r3, [r3, #4]
 80006e8:	005b      	lsls	r3, r3, #1
 80006ea:	2103      	movs	r1, #3
 80006ec:	fa01 f303 	lsl.w	r3, r1, r3
 80006f0:	43db      	mvns	r3, r3
 80006f2:	4619      	mov	r1, r3
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	400a      	ands	r2, r1
 80006fa:	60da      	str	r2, [r3, #12]
	 pGPIOHandle->pGPIOx->PUPDR |= temp;
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	68d9      	ldr	r1, [r3, #12]
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	697a      	ldr	r2, [r7, #20]
 8000708:	430a      	orrs	r2, r1
 800070a:	60da      	str	r2, [r3, #12]

	 //4. Configure the output type
	 temp = 0;
 800070c:	2300      	movs	r3, #0
 800070e:	617b      	str	r3, [r7, #20]
	 temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	7a1b      	ldrb	r3, [r3, #8]
 8000714:	461a      	mov	r2, r3
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	791b      	ldrb	r3, [r3, #4]
 800071a:	fa02 f303 	lsl.w	r3, r2, r3
 800071e:	617b      	str	r3, [r7, #20]
	 pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	685a      	ldr	r2, [r3, #4]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	791b      	ldrb	r3, [r3, #4]
 800072a:	4619      	mov	r1, r3
 800072c:	2301      	movs	r3, #1
 800072e:	408b      	lsls	r3, r1
 8000730:	43db      	mvns	r3, r3
 8000732:	4619      	mov	r1, r3
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	400a      	ands	r2, r1
 800073a:	605a      	str	r2, [r3, #4]
	 pGPIOHandle->pGPIOx->OTYPER |= temp;
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	6859      	ldr	r1, [r3, #4]
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	697a      	ldr	r2, [r7, #20]
 8000748:	430a      	orrs	r2, r1
 800074a:	605a      	str	r2, [r3, #4]

	 temp = 0;
 800074c:	2300      	movs	r3, #0
 800074e:	617b      	str	r3, [r7, #20]
	 //5. Configure the alt functionality
	 if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN) {
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	795b      	ldrb	r3, [r3, #5]
 8000754:	2b02      	cmp	r3, #2
 8000756:	d131      	bne.n	80007bc <GPIO_Init+0x32c>
		 uint8_t temp1, temp2;
		 temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	791b      	ldrb	r3, [r3, #4]
 800075c:	08db      	lsrs	r3, r3, #3
 800075e:	743b      	strb	r3, [r7, #16]
		 temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	791b      	ldrb	r3, [r3, #4]
 8000764:	f003 0307 	and.w	r3, r3, #7
 8000768:	73fb      	strb	r3, [r7, #15]
		 pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	7c3a      	ldrb	r2, [r7, #16]
 8000770:	3208      	adds	r2, #8
 8000772:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000776:	7bfb      	ldrb	r3, [r7, #15]
 8000778:	009b      	lsls	r3, r3, #2
 800077a:	220f      	movs	r2, #15
 800077c:	fa02 f303 	lsl.w	r3, r2, r3
 8000780:	43db      	mvns	r3, r3
 8000782:	4618      	mov	r0, r3
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	7c3a      	ldrb	r2, [r7, #16]
 800078a:	4001      	ands	r1, r0
 800078c:	3208      	adds	r2, #8
 800078e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		 pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	7c3a      	ldrb	r2, [r7, #16]
 8000798:	3208      	adds	r2, #8
 800079a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	7a5b      	ldrb	r3, [r3, #9]
 80007a2:	461a      	mov	r2, r3
 80007a4:	7bfb      	ldrb	r3, [r7, #15]
 80007a6:	009b      	lsls	r3, r3, #2
 80007a8:	fa02 f303 	lsl.w	r3, r2, r3
 80007ac:	4618      	mov	r0, r3
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	7c3a      	ldrb	r2, [r7, #16]
 80007b4:	4301      	orrs	r1, r0
 80007b6:	3208      	adds	r2, #8
 80007b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 }
 }
 80007bc:	bf00      	nop
 80007be:	3718      	adds	r7, #24
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	40023800 	.word	0x40023800
 80007c8:	40013800 	.word	0x40013800
 80007cc:	40013c00 	.word	0x40013c00

080007d0 <GPIO_ReadFromInputPin>:
  * @param[in]		- Pin number which need read
  * @return			- Pin of value 0 or 1
  * @note			- None
  */
 uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
 {
 80007d0:	b480      	push	{r7}
 80007d2:	b085      	sub	sp, #20
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
 80007d8:	460b      	mov	r3, r1
 80007da:	70fb      	strb	r3, [r7, #3]
	 uint8_t ReadInputPinValue;
	 ReadInputPinValue = (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x1);
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	691a      	ldr	r2, [r3, #16]
 80007e0:	78fb      	ldrb	r3, [r7, #3]
 80007e2:	fa22 f303 	lsr.w	r3, r2, r3
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	f003 0301 	and.w	r3, r3, #1
 80007ec:	73fb      	strb	r3, [r7, #15]
	 return ReadInputPinValue;
 80007ee:	7bfb      	ldrb	r3, [r7, #15]
 }
 80007f0:	4618      	mov	r0, r3
 80007f2:	3714      	adds	r7, #20
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bc80      	pop	{r7}
 80007f8:	4770      	bx	lr
	...

080007fc <RCC_Get2PCLKValue>:
#include "stm32f446xx_rcc_driver.h"

uint16_t AHB_PreScaler[8]	= {2, 4, 8, 16, 64, 128, 256, 512};
uint8_t APB1_PreScaler[4]	= {2, 4, 8, 16};

uint32_t RCC_Get2PCLKValue(void) {
 80007fc:	b480      	push	{r7}
 80007fe:	b085      	sub	sp, #20
 8000800:	af00      	add	r7, sp, #0
	uint32_t pclk1, systemClk;
	uint8_t clkSrc, ahbPrescaler, ahbClk, apbPrescaler, apbClk;

	//Configure System clock switch status
	clkSrc = ((RCC->CFGR >> 2) & 0x3);
 8000802:	4b22      	ldr	r3, [pc, #136]	; (800088c <RCC_Get2PCLKValue+0x90>)
 8000804:	689b      	ldr	r3, [r3, #8]
 8000806:	089b      	lsrs	r3, r3, #2
 8000808:	b2db      	uxtb	r3, r3
 800080a:	f003 0303 	and.w	r3, r3, #3
 800080e:	727b      	strb	r3, [r7, #9]

	if (clkSrc == 0) {
 8000810:	7a7b      	ldrb	r3, [r7, #9]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d102      	bne.n	800081c <RCC_Get2PCLKValue+0x20>
		systemClk = 16000000;					// HSI oscillator used as the system clock
 8000816:	4b1e      	ldr	r3, [pc, #120]	; (8000890 <RCC_Get2PCLKValue+0x94>)
 8000818:	60fb      	str	r3, [r7, #12]
 800081a:	e004      	b.n	8000826 <RCC_Get2PCLKValue+0x2a>
	}
	else if (clkSrc == 1) {
 800081c:	7a7b      	ldrb	r3, [r7, #9]
 800081e:	2b01      	cmp	r3, #1
 8000820:	d101      	bne.n	8000826 <RCC_Get2PCLKValue+0x2a>
		systemClk = 8000000;					//HSE oscillator used as the system clock
 8000822:	4b1c      	ldr	r3, [pc, #112]	; (8000894 <RCC_Get2PCLKValue+0x98>)
 8000824:	60fb      	str	r3, [r7, #12]
	else if (clkSrc == 3) {
		//PLL_R used as the system clock
	}

	//Configure AHB Pre-scaler
	ahbPrescaler = ((RCC->CFGR >> 4) & 0xF);
 8000826:	4b19      	ldr	r3, [pc, #100]	; (800088c <RCC_Get2PCLKValue+0x90>)
 8000828:	689b      	ldr	r3, [r3, #8]
 800082a:	091b      	lsrs	r3, r3, #4
 800082c:	b2db      	uxtb	r3, r3
 800082e:	f003 030f 	and.w	r3, r3, #15
 8000832:	723b      	strb	r3, [r7, #8]

	if (ahbPrescaler < 8) {
 8000834:	7a3b      	ldrb	r3, [r7, #8]
 8000836:	2b07      	cmp	r3, #7
 8000838:	d802      	bhi.n	8000840 <RCC_Get2PCLKValue+0x44>
		ahbClk = 1;
 800083a:	2301      	movs	r3, #1
 800083c:	72fb      	strb	r3, [r7, #11]
 800083e:	e005      	b.n	800084c <RCC_Get2PCLKValue+0x50>
	}
	else {
		ahbClk = AHB_PreScaler[ahbPrescaler-8];
 8000840:	7a3b      	ldrb	r3, [r7, #8]
 8000842:	3b08      	subs	r3, #8
 8000844:	4a14      	ldr	r2, [pc, #80]	; (8000898 <RCC_Get2PCLKValue+0x9c>)
 8000846:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800084a:	72fb      	strb	r3, [r7, #11]
	}

	//Configure APB Low speed Pre-scaler (APB1)
	apbPrescaler = ((RCC->CFGR >> 10) & 0x7);
 800084c:	4b0f      	ldr	r3, [pc, #60]	; (800088c <RCC_Get2PCLKValue+0x90>)
 800084e:	689b      	ldr	r3, [r3, #8]
 8000850:	0a9b      	lsrs	r3, r3, #10
 8000852:	b2db      	uxtb	r3, r3
 8000854:	f003 0307 	and.w	r3, r3, #7
 8000858:	71fb      	strb	r3, [r7, #7]

	if (apbPrescaler < 4) {
 800085a:	79fb      	ldrb	r3, [r7, #7]
 800085c:	2b03      	cmp	r3, #3
 800085e:	d802      	bhi.n	8000866 <RCC_Get2PCLKValue+0x6a>
		apbClk = 1;
 8000860:	2301      	movs	r3, #1
 8000862:	72bb      	strb	r3, [r7, #10]
 8000864:	e004      	b.n	8000870 <RCC_Get2PCLKValue+0x74>
	}
	else {
		apbClk = APB1_PreScaler[apbPrescaler-4];
 8000866:	79fb      	ldrb	r3, [r7, #7]
 8000868:	3b04      	subs	r3, #4
 800086a:	4a0c      	ldr	r2, [pc, #48]	; (800089c <RCC_Get2PCLKValue+0xa0>)
 800086c:	5cd3      	ldrb	r3, [r2, r3]
 800086e:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 = (systemClk/ahbClk)/apbClk;
 8000870:	7afb      	ldrb	r3, [r7, #11]
 8000872:	68fa      	ldr	r2, [r7, #12]
 8000874:	fbb2 f2f3 	udiv	r2, r2, r3
 8000878:	7abb      	ldrb	r3, [r7, #10]
 800087a:	fbb2 f3f3 	udiv	r3, r2, r3
 800087e:	603b      	str	r3, [r7, #0]

	return pclk1;
 8000880:	683b      	ldr	r3, [r7, #0]
}
 8000882:	4618      	mov	r0, r3
 8000884:	3714      	adds	r7, #20
 8000886:	46bd      	mov	sp, r7
 8000888:	bc80      	pop	{r7}
 800088a:	4770      	bx	lr
 800088c:	40023800 	.word	0x40023800
 8000890:	00f42400 	.word	0x00f42400
 8000894:	007a1200 	.word	0x007a1200
 8000898:	20000400 	.word	0x20000400
 800089c:	20000410 	.word	0x20000410

080008a0 <USART_PeriClockControl>:
 * @param[in]		- Base address of the USART/UART peripheral
 * @param[in]		- ENABLE or DISABLE macros
 * @return			- None
 * @note			- None
 */
void USART_PeriClockControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi) {
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
 80008a8:	460b      	mov	r3, r1
 80008aa:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE) {
 80008ac:	78fb      	ldrb	r3, [r7, #3]
 80008ae:	2b01      	cmp	r3, #1
 80008b0:	d141      	bne.n	8000936 <USART_PeriClockControl+0x96>
		if(pUSARTx == USART1) {
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	4a43      	ldr	r2, [pc, #268]	; (80009c4 <USART_PeriClockControl+0x124>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d106      	bne.n	80008c8 <USART_PeriClockControl+0x28>
			USART1_PCCK_EN();
 80008ba:	4b43      	ldr	r3, [pc, #268]	; (80009c8 <USART_PeriClockControl+0x128>)
 80008bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008be:	4a42      	ldr	r2, [pc, #264]	; (80009c8 <USART_PeriClockControl+0x128>)
 80008c0:	f043 0310 	orr.w	r3, r3, #16
 80008c4:	6453      	str	r3, [r2, #68]	; 0x44
		}
		else if (pUSARTx == USART6){
			USART6_PCCK_DI();
		}
	}
}
 80008c6:	e077      	b.n	80009b8 <USART_PeriClockControl+0x118>
		else if (pUSARTx == USART2) {
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	4a40      	ldr	r2, [pc, #256]	; (80009cc <USART_PeriClockControl+0x12c>)
 80008cc:	4293      	cmp	r3, r2
 80008ce:	d106      	bne.n	80008de <USART_PeriClockControl+0x3e>
			USART2_PCCK_EN();
 80008d0:	4b3d      	ldr	r3, [pc, #244]	; (80009c8 <USART_PeriClockControl+0x128>)
 80008d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d4:	4a3c      	ldr	r2, [pc, #240]	; (80009c8 <USART_PeriClockControl+0x128>)
 80008d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008da:	6413      	str	r3, [r2, #64]	; 0x40
}
 80008dc:	e06c      	b.n	80009b8 <USART_PeriClockControl+0x118>
		else if (pUSARTx == USART3) {
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	4a3b      	ldr	r2, [pc, #236]	; (80009d0 <USART_PeriClockControl+0x130>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d106      	bne.n	80008f4 <USART_PeriClockControl+0x54>
			USART3_PCCK_EN();
 80008e6:	4b38      	ldr	r3, [pc, #224]	; (80009c8 <USART_PeriClockControl+0x128>)
 80008e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ea:	4a37      	ldr	r2, [pc, #220]	; (80009c8 <USART_PeriClockControl+0x128>)
 80008ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008f0:	6413      	str	r3, [r2, #64]	; 0x40
}
 80008f2:	e061      	b.n	80009b8 <USART_PeriClockControl+0x118>
		else if (pUSARTx == UART4) {
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	4a37      	ldr	r2, [pc, #220]	; (80009d4 <USART_PeriClockControl+0x134>)
 80008f8:	4293      	cmp	r3, r2
 80008fa:	d106      	bne.n	800090a <USART_PeriClockControl+0x6a>
			UART4_PCCK_EN();
 80008fc:	4b32      	ldr	r3, [pc, #200]	; (80009c8 <USART_PeriClockControl+0x128>)
 80008fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000900:	4a31      	ldr	r2, [pc, #196]	; (80009c8 <USART_PeriClockControl+0x128>)
 8000902:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000906:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000908:	e056      	b.n	80009b8 <USART_PeriClockControl+0x118>
		else if (pUSARTx == UART5) {
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	4a32      	ldr	r2, [pc, #200]	; (80009d8 <USART_PeriClockControl+0x138>)
 800090e:	4293      	cmp	r3, r2
 8000910:	d106      	bne.n	8000920 <USART_PeriClockControl+0x80>
			UART5_PCCK_EN();
 8000912:	4b2d      	ldr	r3, [pc, #180]	; (80009c8 <USART_PeriClockControl+0x128>)
 8000914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000916:	4a2c      	ldr	r2, [pc, #176]	; (80009c8 <USART_PeriClockControl+0x128>)
 8000918:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800091c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800091e:	e04b      	b.n	80009b8 <USART_PeriClockControl+0x118>
		else if (pUSARTx == USART6) {
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	4a2e      	ldr	r2, [pc, #184]	; (80009dc <USART_PeriClockControl+0x13c>)
 8000924:	4293      	cmp	r3, r2
 8000926:	d147      	bne.n	80009b8 <USART_PeriClockControl+0x118>
			USART6_PCCK_EN();
 8000928:	4b27      	ldr	r3, [pc, #156]	; (80009c8 <USART_PeriClockControl+0x128>)
 800092a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800092c:	4a26      	ldr	r2, [pc, #152]	; (80009c8 <USART_PeriClockControl+0x128>)
 800092e:	f043 0320 	orr.w	r3, r3, #32
 8000932:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000934:	e040      	b.n	80009b8 <USART_PeriClockControl+0x118>
		if (pUSARTx == USART1){
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	4a22      	ldr	r2, [pc, #136]	; (80009c4 <USART_PeriClockControl+0x124>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d106      	bne.n	800094c <USART_PeriClockControl+0xac>
			USART1_PCCK_DI();
 800093e:	4b22      	ldr	r3, [pc, #136]	; (80009c8 <USART_PeriClockControl+0x128>)
 8000940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000942:	4a21      	ldr	r2, [pc, #132]	; (80009c8 <USART_PeriClockControl+0x128>)
 8000944:	f023 0310 	bic.w	r3, r3, #16
 8000948:	6453      	str	r3, [r2, #68]	; 0x44
}
 800094a:	e035      	b.n	80009b8 <USART_PeriClockControl+0x118>
		else if (pUSARTx == USART2) {
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	4a1f      	ldr	r2, [pc, #124]	; (80009cc <USART_PeriClockControl+0x12c>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d106      	bne.n	8000962 <USART_PeriClockControl+0xc2>
			USART2_PCCK_DI();
 8000954:	4b1c      	ldr	r3, [pc, #112]	; (80009c8 <USART_PeriClockControl+0x128>)
 8000956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000958:	4a1b      	ldr	r2, [pc, #108]	; (80009c8 <USART_PeriClockControl+0x128>)
 800095a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800095e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000960:	e02a      	b.n	80009b8 <USART_PeriClockControl+0x118>
		else if (pUSARTx == USART3) {
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	4a1a      	ldr	r2, [pc, #104]	; (80009d0 <USART_PeriClockControl+0x130>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d106      	bne.n	8000978 <USART_PeriClockControl+0xd8>
			USART3_PCCK_DI();
 800096a:	4b17      	ldr	r3, [pc, #92]	; (80009c8 <USART_PeriClockControl+0x128>)
 800096c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096e:	4a16      	ldr	r2, [pc, #88]	; (80009c8 <USART_PeriClockControl+0x128>)
 8000970:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000974:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000976:	e01f      	b.n	80009b8 <USART_PeriClockControl+0x118>
		else if (pUSARTx == UART4) {
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	4a16      	ldr	r2, [pc, #88]	; (80009d4 <USART_PeriClockControl+0x134>)
 800097c:	4293      	cmp	r3, r2
 800097e:	d106      	bne.n	800098e <USART_PeriClockControl+0xee>
			UART4_PCCK_DI();
 8000980:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <USART_PeriClockControl+0x128>)
 8000982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000984:	4a10      	ldr	r2, [pc, #64]	; (80009c8 <USART_PeriClockControl+0x128>)
 8000986:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800098a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800098c:	e014      	b.n	80009b8 <USART_PeriClockControl+0x118>
		else if (pUSARTx == UART5) {
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	4a11      	ldr	r2, [pc, #68]	; (80009d8 <USART_PeriClockControl+0x138>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d106      	bne.n	80009a4 <USART_PeriClockControl+0x104>
			UART5_PCCK_DI();
 8000996:	4b0c      	ldr	r3, [pc, #48]	; (80009c8 <USART_PeriClockControl+0x128>)
 8000998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099a:	4a0b      	ldr	r2, [pc, #44]	; (80009c8 <USART_PeriClockControl+0x128>)
 800099c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80009a0:	6413      	str	r3, [r2, #64]	; 0x40
}
 80009a2:	e009      	b.n	80009b8 <USART_PeriClockControl+0x118>
		else if (pUSARTx == USART6){
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	4a0d      	ldr	r2, [pc, #52]	; (80009dc <USART_PeriClockControl+0x13c>)
 80009a8:	4293      	cmp	r3, r2
 80009aa:	d105      	bne.n	80009b8 <USART_PeriClockControl+0x118>
			USART6_PCCK_DI();
 80009ac:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <USART_PeriClockControl+0x128>)
 80009ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b0:	4a05      	ldr	r2, [pc, #20]	; (80009c8 <USART_PeriClockControl+0x128>)
 80009b2:	f023 0320 	bic.w	r3, r3, #32
 80009b6:	6453      	str	r3, [r2, #68]	; 0x44
}
 80009b8:	bf00      	nop
 80009ba:	370c      	adds	r7, #12
 80009bc:	46bd      	mov	sp, r7
 80009be:	bc80      	pop	{r7}
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	40011000 	.word	0x40011000
 80009c8:	40023800 	.word	0x40023800
 80009cc:	40004400 	.word	0x40004400
 80009d0:	40004800 	.word	0x40004800
 80009d4:	40004c00 	.word	0x40004c00
 80009d8:	40005000 	.word	0x40005000
 80009dc:	40011400 	.word	0x40011400

080009e0 <USART_Init>:
 * @brief			- This function initialize the give USART/UART port and give USART/UART pin
 * @param[in]		- Handle structure for a USART/UART pin
 * @return			- None
 * @note			- None
 */
void USART_Init(USART_Handle_t *pUSARTHandle) {
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b084      	sub	sp, #16
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0;
 80009e8:	2300      	movs	r3, #0
 80009ea:	60fb      	str	r3, [r7, #12]

	//Implement the code to enable the Clock for given USART peripheral
	USART_PeriClockControl(pUSARTHandle->pUSARTx, ENABLE);
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	2101      	movs	r1, #1
 80009f2:	4618      	mov	r0, r3
 80009f4:	f7ff ff54 	bl	80008a0 <USART_PeriClockControl>

	//Configuration of CR1
	//Enable USART Tx and Rx engines according to the USART_Mode configuration item
	if ( pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_RX) {
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	791b      	ldrb	r3, [r3, #4]
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d104      	bne.n	8000a0a <USART_Init+0x2a>
		//Implement the code to enable the Receiver bit field
		tempreg|= (1 << USART_CR1_RE);
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	f043 0304 	orr.w	r3, r3, #4
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	e010      	b.n	8000a2c <USART_Init+0x4c>
	}
	else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_TX) {
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	791b      	ldrb	r3, [r3, #4]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d104      	bne.n	8000a1c <USART_Init+0x3c>
		//Implement the code to enable the Transmitter bit field
		tempreg |= (1 << USART_CR1_TE);
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	f043 0308 	orr.w	r3, r3, #8
 8000a18:	60fb      	str	r3, [r7, #12]
 8000a1a:	e007      	b.n	8000a2c <USART_Init+0x4c>
	}
	else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TXRX) {
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	791b      	ldrb	r3, [r3, #4]
 8000a20:	2b02      	cmp	r3, #2
 8000a22:	d103      	bne.n	8000a2c <USART_Init+0x4c>
		//Implement the code to enable the both Transmitter and Receiver bit fields
		tempreg |= ((1 << USART_CR1_RE) | (1 << USART_CR1_TE));
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	f043 030c 	orr.w	r3, r3, #12
 8000a2a:	60fb      	str	r3, [r7, #12]
	}
	//Implement the code to configure the Word length configuration item
	tempreg |= pUSARTHandle->USART_Config.USART_WordLength << USART_CR1_M ;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	7b5b      	ldrb	r3, [r3, #13]
 8000a30:	031b      	lsls	r3, r3, #12
 8000a32:	461a      	mov	r2, r3
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	4313      	orrs	r3, r2
 8000a38:	60fb      	str	r3, [r7, #12]

	//Configuration of parity control bit fields
	if ( pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_EVEN) {
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	7b9b      	ldrb	r3, [r3, #14]
 8000a3e:	2b01      	cmp	r3, #1
 8000a40:	d104      	bne.n	8000a4c <USART_Init+0x6c>
		//Implement the code to enale the parity control
		tempreg |= (1 << USART_CR1_PCE);
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a48:	60fb      	str	r3, [r7, #12]
 8000a4a:	e00b      	b.n	8000a64 <USART_Init+0x84>

		//Implement the code to enable EVEN parity
		//Not required because by default EVEN parity will be selected once you enable the parity control
	}
	else if (pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_ODD ) {
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	7b9b      	ldrb	r3, [r3, #14]
 8000a50:	2b02      	cmp	r3, #2
 8000a52:	d107      	bne.n	8000a64 <USART_Init+0x84>
		//Implement the code to enable the parity control
		tempreg |= (1 << USART_CR1_PCE);
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a5a:	60fb      	str	r3, [r7, #12]

		//Implement the code to enable ODD parity
		tempreg |= (1 << USART_CR1_PS);
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a62:	60fb      	str	r3, [r7, #12]
	}

	//Program the CR1 register
	pUSARTHandle->pUSARTx->CR1 = tempreg;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	68fa      	ldr	r2, [r7, #12]
 8000a6a:	60da      	str	r2, [r3, #12]

	//Configuration of CR2
	tempreg = 0;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	60fb      	str	r3, [r7, #12]

	//Implement the code to configure the number of stop bits inserted during USART frame transmission
	tempreg |= pUSARTHandle->USART_Config.USART_NoOfStopBits <<  USART_CR2_STOP;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	7b1b      	ldrb	r3, [r3, #12]
 8000a74:	031b      	lsls	r3, r3, #12
 8000a76:	461a      	mov	r2, r3
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	4313      	orrs	r3, r2
 8000a7c:	60fb      	str	r3, [r7, #12]

	//Program the CR2 register
	pUSARTHandle->pUSARTx->CR2 = tempreg;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	68fa      	ldr	r2, [r7, #12]
 8000a84:	611a      	str	r2, [r3, #16]

	//Configuration of CR3
	tempreg=0;
 8000a86:	2300      	movs	r3, #0
 8000a88:	60fb      	str	r3, [r7, #12]

	//Configuration of USART hardware flow control
	if ( pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS) {
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	7bdb      	ldrb	r3, [r3, #15]
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	d104      	bne.n	8000a9c <USART_Init+0xbc>
		//Implement the code to enable CTS flow control
		tempreg |= (1 << USART_CR3_CTSE);
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a98:	60fb      	str	r3, [r7, #12]
 8000a9a:	e010      	b.n	8000abe <USART_Init+0xde>
	}
	else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_RTS) {
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	7bdb      	ldrb	r3, [r3, #15]
 8000aa0:	2b02      	cmp	r3, #2
 8000aa2:	d104      	bne.n	8000aae <USART_Init+0xce>
		//Implement the code to enable RTS flow control
		tempreg |= (1 << USART_CR3_RTSE);
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	e007      	b.n	8000abe <USART_Init+0xde>
	}
	else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS_RTS) {
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	7bdb      	ldrb	r3, [r3, #15]
 8000ab2:	2b03      	cmp	r3, #3
 8000ab4:	d103      	bne.n	8000abe <USART_Init+0xde>
		//Implement the code to enable both CTS and RTS Flow control
		tempreg |= ((1 << USART_CR3_CTSE) | (1 << USART_CR3_RTSE));
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000abc:	60fb      	str	r3, [r7, #12]
	}

	pUSARTHandle->pUSARTx->CR3 = tempreg;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	68fa      	ldr	r2, [r7, #12]
 8000ac4:	615a      	str	r2, [r3, #20]

	//Implement the code to configure the baud rate
	USART_SetBaudRate(pUSARTHandle->pUSARTx, pUSARTHandle->USART_Config.USART_Baud);
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681a      	ldr	r2, [r3, #0]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	689b      	ldr	r3, [r3, #8]
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4610      	mov	r0, r2
 8000ad2:	f000 f881 	bl	8000bd8 <USART_SetBaudRate>

}
 8000ad6:	bf00      	nop
 8000ad8:	3710      	adds	r7, #16
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}

08000ade <USART_SendData>:
 * @param[in]		- buffer when transmit data
 * @param[in]		- Data length
 * @return			- None
 * @note			- Call this as blocking API, because the function call will wait until all the bytes are transmitted.
 */
void USART_SendData(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t Length) {
 8000ade:	b580      	push	{r7, lr}
 8000ae0:	b086      	sub	sp, #24
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	60f8      	str	r0, [r7, #12]
 8000ae6:	60b9      	str	r1, [r7, #8]
 8000ae8:	607a      	str	r2, [r7, #4]

	uint16_t *pdata;
   //Loop over until "Length" number of bytes are transferred
	for (uint32_t i = 0; i < Length; i++) {
 8000aea:	2300      	movs	r3, #0
 8000aec:	617b      	str	r3, [r7, #20]
 8000aee:	e031      	b.n	8000b54 <USART_SendData+0x76>
		//Implement the code to wait until TXE flag is set in the SR
		while(!USART_GetFlagStatus(pUSARTHandle->pUSARTx, USART_FLAG_TXE));
 8000af0:	bf00      	nop
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	2180      	movs	r1, #128	; 0x80
 8000af8:	4618      	mov	r0, r3
 8000afa:	f000 f83d 	bl	8000b78 <USART_GetFlagStatus>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d0f6      	beq.n	8000af2 <USART_SendData+0x14>

         //Check the USART_WordLength item for 9BIT or 8BIT in a frame
		if (pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS) {
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	7b5b      	ldrb	r3, [r3, #13]
 8000b08:	2b01      	cmp	r3, #1
 8000b0a:	d118      	bne.n	8000b3e <USART_SendData+0x60>
			//if 9BIT, load the DR with 2bytes masking the bits other than first 9 bits
			pdata = (uint16_t*)pTxBuffer;
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	613b      	str	r3, [r7, #16]
			pUSARTHandle->pUSARTx->DR = (*pdata & (uint16_t)0x01FF);
 8000b10:	693b      	ldr	r3, [r7, #16]
 8000b12:	881b      	ldrh	r3, [r3, #0]
 8000b14:	461a      	mov	r2, r3
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000b1e:	605a      	str	r2, [r3, #4]

			//check for USART_ParityControl
			if (pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE) {
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	7b9b      	ldrb	r3, [r3, #14]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d106      	bne.n	8000b36 <USART_SendData+0x58>
				//No parity is used in this transfer. 9bits of user data will be sent
				//Implement the code to increment pTxBuffer twice
				pTxBuffer++;
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	3301      	adds	r3, #1
 8000b2c:	60bb      	str	r3, [r7, #8]
				pTxBuffer++;
 8000b2e:	68bb      	ldr	r3, [r7, #8]
 8000b30:	3301      	adds	r3, #1
 8000b32:	60bb      	str	r3, [r7, #8]
 8000b34:	e00b      	b.n	8000b4e <USART_SendData+0x70>
			}
			else {
				//Parity bit is used in this transfer. 8bits of user data will be sent
				//The 9th bit will be replaced by parity bit by the hardware
				pTxBuffer++;
 8000b36:	68bb      	ldr	r3, [r7, #8]
 8000b38:	3301      	adds	r3, #1
 8000b3a:	60bb      	str	r3, [r7, #8]
 8000b3c:	e007      	b.n	8000b4e <USART_SendData+0x70>
			}
		}
		else {
			//This is 8bit data transfer
			pUSARTHandle->pUSARTx->DR = (*pTxBuffer  & (uint8_t)0xFF);
 8000b3e:	68bb      	ldr	r3, [r7, #8]
 8000b40:	781a      	ldrb	r2, [r3, #0]
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	605a      	str	r2, [r3, #4]

			//Implement the code to increment the buffer address
			pTxBuffer++;
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	60bb      	str	r3, [r7, #8]
	for (uint32_t i = 0; i < Length; i++) {
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	3301      	adds	r3, #1
 8000b52:	617b      	str	r3, [r7, #20]
 8000b54:	697a      	ldr	r2, [r7, #20]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	d3c9      	bcc.n	8000af0 <USART_SendData+0x12>
		}
	}

	//Implement the code to wait till TC flag is set in the SR
	while(!USART_GetFlagStatus(pUSARTHandle->pUSARTx, USART_FLAG_TC));
 8000b5c:	bf00      	nop
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	2140      	movs	r1, #64	; 0x40
 8000b64:	4618      	mov	r0, r3
 8000b66:	f000 f807 	bl	8000b78 <USART_GetFlagStatus>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d0f6      	beq.n	8000b5e <USART_SendData+0x80>
}
 8000b70:	bf00      	nop
 8000b72:	3718      	adds	r7, #24
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <USART_GetFlagStatus>:
 * @param[in]		- Base address of the USART peripheral
 * @param[in]		- flap name
 * @return			- return status register
 * @note			- None
 */
uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx, uint8_t StatusFlagName) {
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
 8000b80:	460b      	mov	r3, r1
 8000b82:	70fb      	strb	r3, [r7, #3]
	if (pUSARTx->SR & StatusFlagName) {
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	78fb      	ldrb	r3, [r7, #3]
 8000b8a:	4013      	ands	r3, r2
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <USART_GetFlagStatus+0x1c>
		return FLAG_SET;
 8000b90:	2301      	movs	r3, #1
 8000b92:	e000      	b.n	8000b96 <USART_GetFlagStatus+0x1e>
	}
	return FLAG_RESET;
 8000b94:	2300      	movs	r3, #0
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	370c      	adds	r7, #12
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bc80      	pop	{r7}
 8000b9e:	4770      	bx	lr

08000ba0 <USART_PeripheralControl>:
 * @param[in]		- Base address of the USART peripheral
 * @param[in]		- Enable or Disable
 * @return			- None
 * @note			- None
 */
void USART_PeripheralControl(USART_RegDef_t *pUSARTx, uint8_t EnOrDi) {
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
 8000ba8:	460b      	mov	r3, r1
 8000baa:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE) {
 8000bac:	78fb      	ldrb	r3, [r7, #3]
 8000bae:	2b01      	cmp	r3, #1
 8000bb0:	d106      	bne.n	8000bc0 <USART_PeripheralControl+0x20>
		pUSARTx->CR1 |= (1 << USART_CR1_UE);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	68db      	ldr	r3, [r3, #12]
 8000bb6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	60da      	str	r2, [r3, #12]
	}
	else {
		pUSARTx->CR1 &= ~(1 << USART_CR1_UE);
	}
}
 8000bbe:	e005      	b.n	8000bcc <USART_PeripheralControl+0x2c>
		pUSARTx->CR1 &= ~(1 << USART_CR1_UE);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	68db      	ldr	r3, [r3, #12]
 8000bc4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	60da      	str	r2, [r3, #12]
}
 8000bcc:	bf00      	nop
 8000bce:	370c      	adds	r7, #12
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bc80      	pop	{r7}
 8000bd4:	4770      	bx	lr
	...

08000bd8 <USART_SetBaudRate>:
 * @param[in]		- Base address of the USART peripheral
 * @param[in]		- Baud Rate (9600, 19200, 38400, etc)
 * @return			- None
 * @note			- None
 */
void USART_SetBaudRate(USART_RegDef_t *pUSARTx, uint32_t BaudRate) {
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b088      	sub	sp, #32
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	6039      	str	r1, [r7, #0]
	uint32_t usartdiv;

	//variables to hold Mantissa and Fraction values
	uint32_t M_part, F_part;

	uint32_t tempreg=0;
 8000be2:	2300      	movs	r3, #0
 8000be4:	613b      	str	r3, [r7, #16]

	  //Get the value of APB bus clock in to the variable PCLKx
	  if (pUSARTx == USART1 || pUSARTx == USART6) {
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4a31      	ldr	r2, [pc, #196]	; (8000cb0 <USART_SetBaudRate+0xd8>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d003      	beq.n	8000bf6 <USART_SetBaudRate+0x1e>
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4a30      	ldr	r2, [pc, #192]	; (8000cb4 <USART_SetBaudRate+0xdc>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d103      	bne.n	8000bfe <USART_SetBaudRate+0x26>
		   //USART1 and USART6 are hanging on APB2 bus
		   PCLKx = RCC_Get2PCLKValue();
 8000bf6:	f7ff fe01 	bl	80007fc <RCC_Get2PCLKValue>
 8000bfa:	61f8      	str	r0, [r7, #28]
 8000bfc:	e002      	b.n	8000c04 <USART_SetBaudRate+0x2c>
	  }
	  else {
		   PCLKx = RCC_Get2PCLKValue();
 8000bfe:	f7ff fdfd 	bl	80007fc <RCC_Get2PCLKValue>
 8000c02:	61f8      	str	r0, [r7, #28]
	  }

	  //Check for OVER8 configuration bit
	  if (pUSARTx->CR1 & (1 << USART_CR1_OVER8)) {
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d00b      	beq.n	8000c28 <USART_SetBaudRate+0x50>
		   //OVER8 = 1 , over sampling by 8
		   usartdiv = ((25 * PCLKx) / (2 *BaudRate));
 8000c10:	69fa      	ldr	r2, [r7, #28]
 8000c12:	4613      	mov	r3, r2
 8000c14:	009b      	lsls	r3, r3, #2
 8000c16:	4413      	add	r3, r2
 8000c18:	009a      	lsls	r2, r3, #2
 8000c1a:	441a      	add	r2, r3
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	005b      	lsls	r3, r3, #1
 8000c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c24:	61bb      	str	r3, [r7, #24]
 8000c26:	e00a      	b.n	8000c3e <USART_SetBaudRate+0x66>
	  }
	  else {
		   //Over sampling by 16
		  usartdiv = ((25 * PCLKx) / (4 *BaudRate));
 8000c28:	69fa      	ldr	r2, [r7, #28]
 8000c2a:	4613      	mov	r3, r2
 8000c2c:	009b      	lsls	r3, r3, #2
 8000c2e:	4413      	add	r3, r2
 8000c30:	009a      	lsls	r2, r3, #2
 8000c32:	441a      	add	r2, r3
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	009b      	lsls	r3, r3, #2
 8000c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c3c:	61bb      	str	r3, [r7, #24]
	  }

	  //Calculate the Mantissa part
	  M_part = usartdiv/100;
 8000c3e:	69bb      	ldr	r3, [r7, #24]
 8000c40:	4a1d      	ldr	r2, [pc, #116]	; (8000cb8 <USART_SetBaudRate+0xe0>)
 8000c42:	fba2 2303 	umull	r2, r3, r2, r3
 8000c46:	095b      	lsrs	r3, r3, #5
 8000c48:	60fb      	str	r3, [r7, #12]

	  //Place the Mantissa part in appropriate bit position. refer USART_BRR
	  tempreg |= M_part << 4;
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	011b      	lsls	r3, r3, #4
 8000c4e:	693a      	ldr	r2, [r7, #16]
 8000c50:	4313      	orrs	r3, r2
 8000c52:	613b      	str	r3, [r7, #16]

	  //Extract the fraction part
	  F_part = (usartdiv - (M_part * 100));
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	2264      	movs	r2, #100	; 0x64
 8000c58:	fb02 f303 	mul.w	r3, r2, r3
 8000c5c:	69ba      	ldr	r2, [r7, #24]
 8000c5e:	1ad3      	subs	r3, r2, r3
 8000c60:	617b      	str	r3, [r7, #20]

	  //Calculate the final fractional
	  if (pUSARTx->CR1 & ( 1 << USART_CR1_OVER8)) {
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	68db      	ldr	r3, [r3, #12]
 8000c66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d00a      	beq.n	8000c84 <USART_SetBaudRate+0xac>
		  //OVER8 = 1 , over sampling by 8
		  F_part = ((( F_part * 8)+ 50) / 100)& ((uint8_t)0x07);
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	00db      	lsls	r3, r3, #3
 8000c72:	3332      	adds	r3, #50	; 0x32
 8000c74:	4a10      	ldr	r2, [pc, #64]	; (8000cb8 <USART_SetBaudRate+0xe0>)
 8000c76:	fba2 2303 	umull	r2, r3, r2, r3
 8000c7a:	095b      	lsrs	r3, r3, #5
 8000c7c:	f003 0307 	and.w	r3, r3, #7
 8000c80:	617b      	str	r3, [r7, #20]
 8000c82:	e009      	b.n	8000c98 <USART_SetBaudRate+0xc0>
	  }
	  else {
		   //over sampling by 16
		   F_part = ((( F_part * 16)+ 50) / 100) & ((uint8_t)0x0F);
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	011b      	lsls	r3, r3, #4
 8000c88:	3332      	adds	r3, #50	; 0x32
 8000c8a:	4a0b      	ldr	r2, [pc, #44]	; (8000cb8 <USART_SetBaudRate+0xe0>)
 8000c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8000c90:	095b      	lsrs	r3, r3, #5
 8000c92:	f003 030f 	and.w	r3, r3, #15
 8000c96:	617b      	str	r3, [r7, #20]
	   }

	  //Place the fractional part in appropriate bit position . refer USART_BRR
	  tempreg |= F_part;
 8000c98:	693a      	ldr	r2, [r7, #16]
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	613b      	str	r3, [r7, #16]

	  //copy the value of tempreg in to BRR register
	  pUSARTx->BRR = tempreg;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	609a      	str	r2, [r3, #8]
}
 8000ca6:	bf00      	nop
 8000ca8:	3720      	adds	r7, #32
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40011000 	.word	0x40011000
 8000cb4:	40011400 	.word	0x40011400
 8000cb8:	51eb851f 	.word	0x51eb851f

08000cbc <__libc_init_array>:
 8000cbc:	b570      	push	{r4, r5, r6, lr}
 8000cbe:	4e0d      	ldr	r6, [pc, #52]	; (8000cf4 <__libc_init_array+0x38>)
 8000cc0:	4c0d      	ldr	r4, [pc, #52]	; (8000cf8 <__libc_init_array+0x3c>)
 8000cc2:	1ba4      	subs	r4, r4, r6
 8000cc4:	10a4      	asrs	r4, r4, #2
 8000cc6:	2500      	movs	r5, #0
 8000cc8:	42a5      	cmp	r5, r4
 8000cca:	d109      	bne.n	8000ce0 <__libc_init_array+0x24>
 8000ccc:	4e0b      	ldr	r6, [pc, #44]	; (8000cfc <__libc_init_array+0x40>)
 8000cce:	4c0c      	ldr	r4, [pc, #48]	; (8000d00 <__libc_init_array+0x44>)
 8000cd0:	f000 f820 	bl	8000d14 <_init>
 8000cd4:	1ba4      	subs	r4, r4, r6
 8000cd6:	10a4      	asrs	r4, r4, #2
 8000cd8:	2500      	movs	r5, #0
 8000cda:	42a5      	cmp	r5, r4
 8000cdc:	d105      	bne.n	8000cea <__libc_init_array+0x2e>
 8000cde:	bd70      	pop	{r4, r5, r6, pc}
 8000ce0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000ce4:	4798      	blx	r3
 8000ce6:	3501      	adds	r5, #1
 8000ce8:	e7ee      	b.n	8000cc8 <__libc_init_array+0xc>
 8000cea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000cee:	4798      	blx	r3
 8000cf0:	3501      	adds	r5, #1
 8000cf2:	e7f2      	b.n	8000cda <__libc_init_array+0x1e>
 8000cf4:	08000d2c 	.word	0x08000d2c
 8000cf8:	08000d2c 	.word	0x08000d2c
 8000cfc:	08000d2c 	.word	0x08000d2c
 8000d00:	08000d30 	.word	0x08000d30

08000d04 <memset>:
 8000d04:	4402      	add	r2, r0
 8000d06:	4603      	mov	r3, r0
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d100      	bne.n	8000d0e <memset+0xa>
 8000d0c:	4770      	bx	lr
 8000d0e:	f803 1b01 	strb.w	r1, [r3], #1
 8000d12:	e7f9      	b.n	8000d08 <memset+0x4>

08000d14 <_init>:
 8000d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d16:	bf00      	nop
 8000d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d1a:	bc08      	pop	{r3}
 8000d1c:	469e      	mov	lr, r3
 8000d1e:	4770      	bx	lr

08000d20 <_fini>:
 8000d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d22:	bf00      	nop
 8000d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d26:	bc08      	pop	{r3}
 8000d28:	469e      	mov	lr, r3
 8000d2a:	4770      	bx	lr
